# This is a basic workflow to help you get started with Actions

name: Android CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out the code
        uses: actions/checkout@v4

      # Sets up the JDK for your Android build
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'  # Specify Java version
          distribution: 'adopt'

      # Caches Gradle packages to speed up builds
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Lint the project
      - name: Lint the project
        run: ./gradlew lint

      # Run unit tests
      - name: Run unit tests
        run: ./gradlew test

      # Build the project
      - name: Build the project
        run: ./gradlew build

      # Generate APK
      - name: Generate APK
        run: ./gradlew assembleDebug

      # Upload APK as an artifact
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-debug.apk
          path: app/build/outputs/apk/debug/app-debug.apk
